/*
** Julian Pidancet <julian.pidancet@citrix.com>
**
** WARNING: This file is generated. Be sure you are editing rpc_definitions.m4
** or dmbus.h.in instead of dmbus.h. Otherwise your changes WILL BE LOST.
*/

#ifndef __DMBUS_H__
# define __DMBUS_H__

# include <stdint.h>
# include <libargo.h>

# ifdef __cplusplus
extern "C"
{
# endif
    /**
     * SHA1 Hash of the interface source files.
     */
INTERFACE_HASH

    /**
     * dmbus services definitions
     */
# define DMBUS_BASE_PORT    4000
    enum dmbus_service_id
    {
        DMBUS_SERVICE_DUMMY = 0, /* Only for test programs */
        DMBUS_SERVICE_SURFMAN = 1,
        DMBUS_SERVICE_INPUT = 2,

        DMBUS_SERVICE_MAX,
    };

    /**
     * dmbus types definitions
     */
# define DMBUS_ID_INVALID ((uint32_t)-1)
    enum
    {
        DEVICE_TYPE_XENFB = 0,
        DEVICE_TYPE_VESA,
        DEVICE_TYPE_XENGFX,
        DEVICE_TYPE_PASSTHROUGH,
        DEVICE_TYPE_EMULATION,
        DEVICE_TYPE_INPUT,
        DEVICE_TYPE_INPUT_PVM
    };
    enum
    {
        FRAMEBUFFER_FORMAT_RGB555 = (1 << 0),
        FRAMEBUFFER_FORMAT_BGR555 = (1 << 1),
        FRAMEBUFFER_FORMAT_RGB565 = (1 << 2),
        FRAMEBUFFER_FORMAT_BGR565 = (1 << 3),
        FRAMEBUFFER_FORMAT_RGB888 = (1 << 4),
        FRAMEBUFFER_FORMAT_BGR888 = (1 << 5),
        FRAMEBUFFER_FORMAT_RGBX8888 = (1 << 6),
        FRAMEBUFFER_FORMAT_BGRX8888 = (1 << 7),
    };

    typedef uint32_t                DeviceType;
    typedef uint32_t                FramebufferFormat;
    typedef struct {
        uint8_t b[256];
    }                               Buff256;

    typedef struct {
        uint8_t slot;
        char name[26];
        uint32_t evbits;
        uint64_t bits[1];
    } InputConfig;    

    typedef void *dmbus_client_t;

    struct dmbus_rpc_ops;
    struct dmbus_service_ops
    {
        int (*connect)(dmbus_client_t client,
                       int domain,
                       DeviceType type,
                       int dm_domain,
                       int fd,
                       struct dmbus_rpc_ops **ops,
                       void **priv);
        void (*disconnect)(dmbus_client_t client, void *priv);
    };

# define DMBUS_MAX_MSG_LEN 512
# define DMBUS_PACKED __attribute__ ((packed))
    /**
     * dmbus connection prologue
     */
    struct dmbus_conn_prologue
    {
        uint32_t domain;
        DeviceType type;
        uint8_t hash[20];
    } DMBUS_PACKED;

    /**
     * dmbus message format
     */
    union dmbus_msg
    {
        struct dmbus_msg_hdr
        {
            uint32_t msg_len;
            uint32_t msg_type;
            uint32_t return_value;
        } DMBUS_PACKED hdr;

        /**
         * WARNING:
         *
         * The following section contains generated definitions.
         */
MSG_STRUCTS
        /**
         * End of generated definitions section.
         */

    };

    struct dmbus_rpc_ops
    {
        /**
         * WARNING:
         *
         * The following section contains generated definitions.
         */
SERV_MSG_OPS
        /**
         * End of generated definitions section.
         */
    };

/**
 * WARNING:
 *
 * The following section contains generated definitions.
 */
DM_RPC_DEFS
/**
 * End of generated definitions section.
 */
void dmbus_cleanup(void);
int dmbus_init(int service_id, struct dmbus_service_ops *service_ops);
void dmbus_handle_connect(int fd);
void dmbus_handle_events(dmbus_client_t client);
void dmbus_client_disconnect(dmbus_client_t client);

#ifdef __cplusplus
}
#endif

#endif /* __DMBUS_H__ */
