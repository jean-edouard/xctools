/*
** Julian Pidancet <julian.pidancet@citrix.com>
**
** WARNING: This file is generated. Be sure you are editing rpc_definitions.m4
** or dmbus.c.in instead of dmbus.c. Otherwise your changes WILL BE LOST.
*/

#include "project.h"

typedef struct client_node
{
    struct client_node *next;
    struct client_node **pprev;
} client_node;

struct dmbus_service
{
    xen_argo_addr_t addr;
    int fd;
    unsigned short service_id;
    client_node *client_list;

    struct dmbus_service_ops *service_ops;
};

struct dmbus_client
{
    client_node link; /* Must be first */

    xen_argo_addr_t addr;
    int fd;
    void *priv;
    int domain;
    DeviceType dev_type;
    struct dmbus_rpc_ops *rpc_ops;

    uint8_t buff[DMBUS_MAX_MSG_LEN];
    size_t len;
};

static struct dmbus_service *s = NULL;

/*
 * Warning:
 *  These function have to be made atomic if this library is linked against
 *  a multithreaded program.
 */
static void client_list_insert(struct dmbus_client *c)
{
    c->link.next = s->client_list;
    c->link.pprev = &s->client_list;
    if (s->client_list)
        s->client_list->pprev = &c->link.next;
    s->client_list = &c->link;
}

static void client_list_remove(struct dmbus_client *c)
{
    if (c->link.next)
        c->link.next->pprev = c->link.pprev;
    *(c->link.pprev) = c->link.next;
}

void dmbus_cleanup(void)
{
    argo_close(s->fd);
    free(s);
    s = NULL;
}

int dmbus_init(int service_id,
               struct dmbus_service_ops *service_ops)
{
    int rc;

    if (s) {
        errno = EEXIST;
        return -1;
    }

    if (service_id < 0 || service_id >= DMBUS_SERVICE_MAX) {
        errno = ENOENT;
        return -1;
    }

    s = calloc(1, sizeof (*s));
    if (!s) {
        errno = ENOMEM;
        return -1;
    }

    s->fd = argo_socket(SOCK_STREAM);
    if (s->fd == -1) {
        rc = -1;
        goto out_free;
    }
    s->service_id = service_id;
    s->service_ops = service_ops;

    s->addr.aport = DMBUS_BASE_PORT + service_id;
    s->addr.domain_id = XEN_ARGO_DOMID_ANY;

    rc = argo_bind(s->fd, &s->addr, XEN_ARGO_DOMID_ANY);
    if (rc == -1) {
        goto out_close;
    }

    rc = argo_listen(s->fd, 128);
    if (rc == -1) {
        goto out_close;
    }

    s->client_list = NULL;

    return s->fd;

out_close:
    argo_close(s->fd);
out_free:
    free(s);
    s = NULL;

    return rc;
}

static int check_hash(uint8_t *remote)
{
    uint8_t hash[20];
    const char *hash_str = DMBUS_SHA1_STRING;
    size_t i;

    for (i = 0; i < sizeof (hash); i++) {
        unsigned int c;

        sscanf(hash_str + 2 * i, "%02x", &c);
        hash[i] = c;
    }

    return memcmp(remote, hash, 20);
}

static int recv_prologue(int fd, struct dmbus_conn_prologue *p)
{
    fd_set s;
    struct timeval t;
    int rc;
    int b = 0;

    FD_ZERO(&s);
    FD_SET(fd, &s);
    t.tv_sec = 1;
    t.tv_usec = 0;

    while (b != sizeof (*p)) {
        rc = select(fd + 1, &s, NULL, NULL, &t);
        if (rc < 0) /* select() failed */
            return rc;
        if (rc == 0) { /* timeout */
            errno = EBUSY;
            return -1;
        }

        rc = argo_recv(fd, (char *)p + b, sizeof (*p) - b, MSG_DONTWAIT);
        if (rc < 0) /* argo_recv() failed */
            return rc;
        if (rc == 0) { /* other end left */
            errno = EPIPE;
            return -1;
        }

        b += rc;
    }

    return 0;
}

void dmbus_handle_connect(int fd)
{
    struct dmbus_client *c;
    int rc;
    struct dmbus_conn_prologue prologue;
    struct msg_device_model_ready msg;
    int b = 0;

    c = calloc(1, sizeof (*c));
    if (!c)
        return;

    c->fd = argo_accept(fd, &c->addr);
    if (c->fd == -1) {
        free(c);
        return;
    }

    rc = recv_prologue(c->fd, &prologue);
    if (rc) {
        argo_close(c->fd);
        free(c);
        return;
    }

    c->domain = prologue.domain;
    c->dev_type = prologue.type;

    if (check_hash(prologue.hash)) {
        /* Moan as loud as possible */

        syslog(LOG_DAEMON | LOG_ALERT, "%s: WARNING, This service and the "
               "device model don't use the same version of the dmbus interface, "
               "Misery WILL happen !\n", __func__);
        fprintf(stderr, "%s: WARNING, This service and the "
               "device model don't use the same version of the dmbus interface, "
               "Misery WILL happen !\n", __func__);
    }

    if (s->service_ops->connect) {
        rc = s->service_ops->connect(c, c->domain, c->dev_type,
                                     c->addr.domain_id,
                                     c->fd,
                                     &c->rpc_ops,
                                     &c->priv);

        if (rc) {
            /* Connect failed */
            argo_close(c->fd);
            free(c);
            return;
        }
        else
            device_model_ready(c, &msg, sizeof (msg));
    }

    client_list_insert(c);
}

void dmbus_client_disconnect(dmbus_client_t client)
{
    struct dmbus_client *c = client;

    if (s->service_ops->disconnect)
        s->service_ops->disconnect(c, c->priv);

    argo_close(c->fd);
    client_list_remove(c);
    free(c);
}

/* TODO: if argo_send fails, we may want to tell the caller... */
static void send_msg(struct dmbus_client *c,
                     int msgtype,
                     void *data,
                     size_t len)
{
    struct dmbus_msg_hdr *hdr = data;
    int rc;
    size_t b = 0;

    hdr->msg_type = msgtype;
    hdr->msg_len = len;

    while (b < len) {
        /*
         * Let's not let argo_send crash the program:
         * Use MSG_NOSIGNAL to avoid the SIGPIPE.
         */
        rc = argo_send(c->fd, data + b, len - b, MSG_NOSIGNAL);
        if (rc == -1)
            return;

        b += rc;
    }
}

static void broadcast_msg(int msgtype,
                          void *data,
                          size_t len)
{
    client_node *node;

    for (node = s->client_list; node; node = node->next) {
        struct dmbus_client *c;

        c = (struct dmbus_client *)node;
        send_msg(c, msgtype, data, len);
    }
}

static void pop_message(struct dmbus_client *c)
{
    size_t l;
    union dmbus_msg *m = (union dmbus_msg *)c->buff;

    l = m->hdr.msg_len;
    memmove(c->buff, c->buff + l, c->len - l);
    c->len -= l;
}

void dmbus_handle_events(dmbus_client_t client)
{
    int rc;
    struct dmbus_client *c = client;
    union dmbus_msg *m = (union dmbus_msg *)c->buff;

    rc = argo_recv(c->fd, c->buff + c->len, sizeof (c->buff) - c->len, MSG_DONTWAIT);
    switch (rc) {
    case 0:
        dmbus_client_disconnect(client);
    case -1:
        return;
    default:
        c->len += rc;
    }

    while ( (c->len >= sizeof (struct dmbus_msg_hdr)) &&
            (c->len >= m->hdr.msg_len) ) {

        /* Message is complete, ship it ! */

        switch (m->hdr.msg_type) {
            /**
             * WARNING:
             *
             * The following section contains generated code.
             */
SERV_MSG_HANDLERS
            /**
             * End of generated code section.
             */
        }

        pop_message(c);
    }
}

/**
 * WARNING:
 *
 * The following section contains generated code.
 */
DM_RPC_FUNCS
/**
 * End of generated code section.
 */
